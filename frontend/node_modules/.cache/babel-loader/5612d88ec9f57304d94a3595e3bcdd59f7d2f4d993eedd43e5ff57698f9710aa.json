{"ast":null,"code":"const {\n  BadRequestError\n} = require(\"../expressError\");\n\n/**\n * Helper for making selective update queries.\n *\n * The calling function can use it to make the SET clause of an SQL UPDATE\n * statement.\n *\n * @param dataToUpdate {Object} {field1: newVal, field2: newVal, ...}\n * @param jsToSql {Object} maps js-style data fields to database column names,\n *   like { firstName: \"first_name\", age: \"age\" }\n *\n * @returns {Object} {sqlSetCols, dataToUpdate}\n *\n * @example {firstName: 'Aliya', age: 32} =>\n *   { setCols: '\"first_name\"=$1, \"age\"=$2',\n *     values: ['Aliya', 32] }\n */\n\nfunction sqlForPartialUpdate(dataToUpdate, jsToSql) {\n  const keys = Object.keys(dataToUpdate);\n  if (keys.length === 0) throw new BadRequestError(\"No data\");\n\n  // {firstName: 'Aliya', age: 32} => ['\"first_name\"=$1', '\"age\"=$2']\n  const cols = keys.map((colName, idx) => `\"${jsToSql[colName] || colName}\"=$${idx + 1}`);\n  return {\n    setCols: cols.join(\", \"),\n    values: Object.values(dataToUpdate)\n  };\n}\nmodule.exports = {\n  sqlForPartialUpdate\n};","map":{"version":3,"names":["BadRequestError","require","sqlForPartialUpdate","dataToUpdate","jsToSql","keys","Object","length","cols","map","colName","idx","setCols","join","values","module","exports"],"sources":["/Users/max/Desktop/Code/react-jobly/backend/helpers/sql.js"],"sourcesContent":["const { BadRequestError } = require(\"../expressError\");\n\n/**\n * Helper for making selective update queries.\n *\n * The calling function can use it to make the SET clause of an SQL UPDATE\n * statement.\n *\n * @param dataToUpdate {Object} {field1: newVal, field2: newVal, ...}\n * @param jsToSql {Object} maps js-style data fields to database column names,\n *   like { firstName: \"first_name\", age: \"age\" }\n *\n * @returns {Object} {sqlSetCols, dataToUpdate}\n *\n * @example {firstName: 'Aliya', age: 32} =>\n *   { setCols: '\"first_name\"=$1, \"age\"=$2',\n *     values: ['Aliya', 32] }\n */\n\nfunction sqlForPartialUpdate(dataToUpdate, jsToSql) {\n  const keys = Object.keys(dataToUpdate);\n  if (keys.length === 0) throw new BadRequestError(\"No data\");\n\n  // {firstName: 'Aliya', age: 32} => ['\"first_name\"=$1', '\"age\"=$2']\n  const cols = keys.map((colName, idx) =>\n      `\"${jsToSql[colName] || colName}\"=$${idx + 1}`,\n  );\n\n  return {\n    setCols: cols.join(\", \"),\n    values: Object.values(dataToUpdate),\n  };\n}\n\nmodule.exports = { sqlForPartialUpdate };\n"],"mappings":"AAAA,MAAM;EAAEA;AAAgB,CAAC,GAAGC,OAAO,CAAC,iBAAiB,CAAC;;AAEtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,mBAAmBA,CAACC,YAAY,EAAEC,OAAO,EAAE;EAClD,MAAMC,IAAI,GAAGC,MAAM,CAACD,IAAI,CAACF,YAAY,CAAC;EACtC,IAAIE,IAAI,CAACE,MAAM,KAAK,CAAC,EAAE,MAAM,IAAIP,eAAe,CAAC,SAAS,CAAC;;EAE3D;EACA,MAAMQ,IAAI,GAAGH,IAAI,CAACI,GAAG,CAAC,CAACC,OAAO,EAAEC,GAAG,KAC9B,IAAGP,OAAO,CAACM,OAAO,CAAC,IAAIA,OAAQ,MAAKC,GAAG,GAAG,CAAE,EACjD,CAAC;EAED,OAAO;IACLC,OAAO,EAAEJ,IAAI,CAACK,IAAI,CAAC,IAAI,CAAC;IACxBC,MAAM,EAAER,MAAM,CAACQ,MAAM,CAACX,YAAY;EACpC,CAAC;AACH;AAEAY,MAAM,CAACC,OAAO,GAAG;EAAEd;AAAoB,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}