{"ast":null,"code":"import axios from \"axios\";\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\";\n\n/** API Class.\n *\n * Static class tying together methods used to get/send to to the API.\n * There shouldn't be any frontend-specific stuff here, and there shouldn't\n * be any API-aware stuff elsewhere in the frontend.\n *\n */\n\nclass JoblyApi {\n  // the token for interactive with the API will be stored here.\n\n  static async request(endpoint) {\n    let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let method = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : \"get\";\n    console.debug(\"API Call:\", endpoint, data, method);\n\n    //there are multiple ways to pass an authorization token, this is how you pass it in the header.\n    //this has been provided to show you another way to pass the token. you are only expected to read this code for this project.\n    const url = `${BASE_URL}/${endpoint}`;\n    const headers = {\n      Authorization: `Bearer ${JoblyApi.token}`\n    };\n    const params = method === \"get\" ? data : {};\n    try {\n      return (await axios({\n        url,\n        method,\n        data,\n        params,\n        headers\n      })).data;\n    } catch (err) {\n      console.error(\"API Error:\", err.response);\n      let message = err.response.data.error.message;\n      throw Array.isArray(message) ? message : [message];\n    }\n  }\n\n  // Individual API routes\n\n  // get logged in user.\n  static async getCurrentUser(username) {\n    let res = await this.request(`users/${username}`);\n    return res.user;\n  }\n\n  // Get all companies.\n  static async getCompanies(name) {\n    let res = await this.request(\"companies\", {\n      name\n    });\n    return res.companies;\n  }\n\n  // Get all jobs.\n  static async getJobs(name) {\n    let res = await this.request(\"jobs\", {\n      name\n    });\n    return res.jobs;\n  }\n\n  // Get company details.\n\n  static async getCompany(handle) {\n    let res = await this.request(`companies/${handle}`);\n    return res.company;\n  }\n\n  // Get login token.\n\n  static async login(data) {\n    let res = await this.request(`auth/token`, data, \"post\");\n    return res.token;\n  }\n\n  // sign up.\n  static async signup(data) {\n    let res = await this.request(`auth/register`, data, \"post\");\n    return res.token;\n  }\n}\n\n// for now, put token (\"testuser\" / \"password\" on class)\nJoblyApi.token = \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZ\" + \"SI6InRlc3R1c2VyIiwiaXNBZG1pbiI6ZmFsc2UsImlhdCI6MTU5ODE1OTI1OX0.\" + \"FtrMwBQwe6Ue-glIFgz_Nf8XxRT2YecFCiSpYL0fCXc\";\nexport default JoblyApi;","map":{"version":3,"names":["axios","BASE_URL","process","env","REACT_APP_BASE_URL","JoblyApi","request","endpoint","data","arguments","length","undefined","method","console","debug","url","headers","Authorization","token","params","err","error","response","message","Array","isArray","getCurrentUser","username","res","user","getCompanies","name","companies","getJobs","jobs","getCompany","handle","company","login","signup"],"sources":["/Users/max/Desktop/Code/react-jobly/src/api.js"],"sourcesContent":["import axios from \"axios\";\n\nconst BASE_URL = process.env.REACT_APP_BASE_URL || \"http://localhost:3001\";\n\n/** API Class.\n *\n * Static class tying together methods used to get/send to to the API.\n * There shouldn't be any frontend-specific stuff here, and there shouldn't\n * be any API-aware stuff elsewhere in the frontend.\n *\n */\n\nclass JoblyApi {\n  // the token for interactive with the API will be stored here.\n  static token;\n\n  static async request(endpoint, data = {}, method = \"get\") {\n    console.debug(\"API Call:\", endpoint, data, method);\n\n    //there are multiple ways to pass an authorization token, this is how you pass it in the header.\n    //this has been provided to show you another way to pass the token. you are only expected to read this code for this project.\n    const url = `${BASE_URL}/${endpoint}`;\n    const headers = { Authorization: `Bearer ${JoblyApi.token}` };\n    const params = method === \"get\" ? data : {};\n\n    try {\n      return (await axios({ url, method, data, params, headers })).data;\n    } catch (err) {\n      console.error(\"API Error:\", err.response);\n      let message = err.response.data.error.message;\n      throw Array.isArray(message) ? message : [message];\n    }\n  }\n\n  // Individual API routes\n\n  // get logged in user.\n  static async getCurrentUser(username) {\n    let res = await this.request(`users/${username}`);\n    return res.user;\n  }\n\n  // Get all companies.\n  static async getCompanies(name) {\n    let res = await this.request(\"companies\", { name });\n    return res.companies;\n  }\n\n  // Get all jobs.\n  static async getJobs(name) {\n    let res = await this.request(\"jobs\", { name });\n    return res.jobs;\n  }\n\n  // Get company details.\n\n  static async getCompany(handle) {\n    let res = await this.request(`companies/${handle}`);\n    return res.company;\n  }\n\n  // Get login token.\n\n  static async login(data) {\n    let res = await this.request(`auth/token`, data, \"post\");\n    return res.token;\n  }\n\n  // sign up.\n  static async signup(data) {\n    let res = await this.request(`auth/register`, data, \"post\");\n    return res.token;\n  }\n}\n\n// for now, put token (\"testuser\" / \"password\" on class)\nJoblyApi.token =\n  \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZ\" +\n  \"SI6InRlc3R1c2VyIiwiaXNBZG1pbiI6ZmFsc2UsImlhdCI6MTU5ODE1OTI1OX0.\" +\n  \"FtrMwBQwe6Ue-glIFgz_Nf8XxRT2YecFCiSpYL0fCXc\";\n\nexport default JoblyApi;\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,QAAQ,GAAGC,OAAO,CAACC,GAAG,CAACC,kBAAkB,IAAI,uBAAuB;;AAE1E;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,QAAQ,CAAC;EACb;;EAGA,aAAaC,OAAOA,CAACC,QAAQ,EAA6B;IAAA,IAA3BC,IAAI,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;IAAA,IAAEG,MAAM,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,KAAK;IACtDI,OAAO,CAACC,KAAK,CAAC,WAAW,EAAEP,QAAQ,EAAEC,IAAI,EAAEI,MAAM,CAAC;;IAElD;IACA;IACA,MAAMG,GAAG,GAAI,GAAEd,QAAS,IAAGM,QAAS,EAAC;IACrC,MAAMS,OAAO,GAAG;MAAEC,aAAa,EAAG,UAASZ,QAAQ,CAACa,KAAM;IAAE,CAAC;IAC7D,MAAMC,MAAM,GAAGP,MAAM,KAAK,KAAK,GAAGJ,IAAI,GAAG,CAAC,CAAC;IAE3C,IAAI;MACF,OAAO,CAAC,MAAMR,KAAK,CAAC;QAAEe,GAAG;QAAEH,MAAM;QAAEJ,IAAI;QAAEW,MAAM;QAAEH;MAAQ,CAAC,CAAC,EAAER,IAAI;IACnE,CAAC,CAAC,OAAOY,GAAG,EAAE;MACZP,OAAO,CAACQ,KAAK,CAAC,YAAY,EAAED,GAAG,CAACE,QAAQ,CAAC;MACzC,IAAIC,OAAO,GAAGH,GAAG,CAACE,QAAQ,CAACd,IAAI,CAACa,KAAK,CAACE,OAAO;MAC7C,MAAMC,KAAK,CAACC,OAAO,CAACF,OAAO,CAAC,GAAGA,OAAO,GAAG,CAACA,OAAO,CAAC;IACpD;EACF;;EAEA;;EAEA;EACA,aAAaG,cAAcA,CAACC,QAAQ,EAAE;IACpC,IAAIC,GAAG,GAAG,MAAM,IAAI,CAACtB,OAAO,CAAE,SAAQqB,QAAS,EAAC,CAAC;IACjD,OAAOC,GAAG,CAACC,IAAI;EACjB;;EAEA;EACA,aAAaC,YAAYA,CAACC,IAAI,EAAE;IAC9B,IAAIH,GAAG,GAAG,MAAM,IAAI,CAACtB,OAAO,CAAC,WAAW,EAAE;MAAEyB;IAAK,CAAC,CAAC;IACnD,OAAOH,GAAG,CAACI,SAAS;EACtB;;EAEA;EACA,aAAaC,OAAOA,CAACF,IAAI,EAAE;IACzB,IAAIH,GAAG,GAAG,MAAM,IAAI,CAACtB,OAAO,CAAC,MAAM,EAAE;MAAEyB;IAAK,CAAC,CAAC;IAC9C,OAAOH,GAAG,CAACM,IAAI;EACjB;;EAEA;;EAEA,aAAaC,UAAUA,CAACC,MAAM,EAAE;IAC9B,IAAIR,GAAG,GAAG,MAAM,IAAI,CAACtB,OAAO,CAAE,aAAY8B,MAAO,EAAC,CAAC;IACnD,OAAOR,GAAG,CAACS,OAAO;EACpB;;EAEA;;EAEA,aAAaC,KAAKA,CAAC9B,IAAI,EAAE;IACvB,IAAIoB,GAAG,GAAG,MAAM,IAAI,CAACtB,OAAO,CAAE,YAAW,EAAEE,IAAI,EAAE,MAAM,CAAC;IACxD,OAAOoB,GAAG,CAACV,KAAK;EAClB;;EAEA;EACA,aAAaqB,MAAMA,CAAC/B,IAAI,EAAE;IACxB,IAAIoB,GAAG,GAAG,MAAM,IAAI,CAACtB,OAAO,CAAE,eAAc,EAAEE,IAAI,EAAE,MAAM,CAAC;IAC3D,OAAOoB,GAAG,CAACV,KAAK;EAClB;AACF;;AAEA;AACAb,QAAQ,CAACa,KAAK,GACZ,oDAAoD,GACpD,iEAAiE,GACjE,6CAA6C;AAE/C,eAAeb,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}