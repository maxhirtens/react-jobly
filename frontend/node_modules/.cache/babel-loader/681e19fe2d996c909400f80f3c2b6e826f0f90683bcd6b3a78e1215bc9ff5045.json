{"ast":null,"code":"var _jsxFileName = \"/Users/max/Desktop/Code/react-jobly/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport JoblyApi from './api';\nimport NavBar from './navbar/NavBar';\nimport RoutesList from \"./routes/Routes\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport UserContext from \"./auth/UserContext\";\nimport Loading from \"./helpers/Loading\";\nimport { decodeToken } from \"react-jwt\";\nimport './App.css';\n\n// set up a test token.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst testToken = \"Your JWT\";\nfunction App() {\n  _s();\n  const [isLoading, setIsLoading] = useState(true);\n  const [currentUser, setCurrentUser] = useState(null);\n  const [token, setToken] = useState(testToken);\n\n  // login method.\n  const login = async () => {};\n\n  // load user info from API.\n  useEffect(function loadUserInfo() {\n    console.debug(\"App useEffect loadUserInfo\", \"token=\", token);\n    async function getCurrentUser() {\n      if (token) {\n        try {\n          const myDecodedToken = decodeToken(token);\n          console.log(myDecodedToken);\n          let username = \"\";\n          // put the token on the Api class so it can use it to call the API.\n          JoblyApi.token = token;\n          let currentUser = await JoblyApi.getCurrentUser(username);\n          setCurrentUser(currentUser);\n        } catch (err) {\n          console.error(\"App loadUserInfo: problem loading\", err);\n          setCurrentUser(null);\n        }\n      }\n      setIsLoading(false);\n    }\n\n    // set infoLoaded to false while async getCurrentUser runs; once the\n    // data is fetched (or even if an error happens!), this will be set back\n    // to false to control the spinner.\n    setIsLoading(true);\n    getCurrentUser();\n  }, [token]);\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(BrowserRouter, {\n    children: /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n      value: {\n        currentUser,\n        setCurrentUser\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App\",\n        children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(RoutesList, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"J9AVwEbPpCVG3RrKNLa/gjIuNM0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","JoblyApi","NavBar","RoutesList","BrowserRouter","UserContext","Loading","decodeToken","jsxDEV","_jsxDEV","testToken","App","_s","isLoading","setIsLoading","currentUser","setCurrentUser","token","setToken","login","loadUserInfo","console","debug","getCurrentUser","myDecodedToken","log","username","err","error","fileName","_jsxFileName","lineNumber","columnNumber","children","Provider","value","className","_c","$RefreshReg$"],"sources":["/Users/max/Desktop/Code/react-jobly/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport JoblyApi from './api';\nimport NavBar from './navbar/NavBar';\nimport RoutesList from \"./routes/Routes\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport UserContext from \"./auth/UserContext\";\nimport Loading from \"./helpers/Loading\";\nimport { decodeToken } from \"react-jwt\";\nimport './App.css';\n\n// set up a test token.\nconst testToken = \"Your JWT\";\n\n\nfunction App() {\n  const [isLoading, setIsLoading] = useState(true);\n  const [currentUser, setCurrentUser] = useState(null);\n  const [token, setToken] = useState(testToken);\n\n\n  // login method.\n  const login = async () => {\n  }\n\n  // load user info from API.\n  useEffect(function loadUserInfo() {\n    console.debug(\"App useEffect loadUserInfo\", \"token=\", token);\n\n    async function getCurrentUser() {\n      if (token) {\n        try {\n          const myDecodedToken = decodeToken(token);\n          console.log(myDecodedToken)\n          let username = \"\"\n          // put the token on the Api class so it can use it to call the API.\n          JoblyApi.token = token;\n          let currentUser = await JoblyApi.getCurrentUser(username);\n          setCurrentUser(currentUser);\n        } catch (err) {\n          console.error(\"App loadUserInfo: problem loading\", err);\n          setCurrentUser(null);\n        }\n      }\n      setIsLoading(false);\n    }\n\n    // set infoLoaded to false while async getCurrentUser runs; once the\n    // data is fetched (or even if an error happens!), this will be set back\n    // to false to control the spinner.\n    setIsLoading(true);\n    getCurrentUser();\n  }, [token]);\n\n if (isLoading) {\n    return <Loading />\n  }\n\n  return (\n    <BrowserRouter>\n      <UserContext.Provider value={{ currentUser, setCurrentUser }}>\n        <div className=\"App\">\n          <NavBar />\n          <RoutesList />\n        </div>\n      </UserContext.Provider>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}