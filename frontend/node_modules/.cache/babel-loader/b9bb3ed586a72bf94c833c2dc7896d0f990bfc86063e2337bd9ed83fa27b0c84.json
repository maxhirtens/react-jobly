{"ast":null,"code":"var _jsxFileName = \"/Users/max/Desktop/Code/react-jobly/src/companies/Companies.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport CompanyCard from \"./CompanyCard\";\nimport JoblyApi from \"../api\";\nimport SearchForm from \"../helpers/SearchForm\";\nimport Loading from \"../helpers/Loading\";\n\n// show list of all companies with jobs.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Companies = () => {\n  _s();\n  const [companies, setCompanies] = useState(null);\n\n  // get companies from API.\n  async function searchCompanies() {\n    let companies = await JoblyApi.getCompanies();\n    setCompanies(companies);\n  }\n\n  // get companies from API on mount.\n  useEffect(() => {\n    searchCompanies();\n  }, []);\n\n  // i'm not sure why app is broken if i don't return this...\n  if (!companies) return /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 24\n  }, this);\n\n  // map through list and create cards for each company.\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"col-md-8\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(SearchForm, {\n        searchFor: searchCompanies\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 7\n      }, this), companies.map(c => /*#__PURE__*/_jsxDEV(CompanyCard, {\n        handle: c.handle,\n        name: c.name,\n        description: c.description,\n        logoUrl: c.logoUrl\n      }, c.handle, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 3\n  }, this);\n};\n_s(Companies, \"qkMkKjd/WCoWEhXFAi9cDPzYiug=\");\n_c = Companies;\nexport default Companies;\nvar _c;\n$RefreshReg$(_c, \"Companies\");","map":{"version":3,"names":["React","useState","useEffect","CompanyCard","JoblyApi","SearchForm","Loading","jsxDEV","_jsxDEV","Companies","_s","companies","setCompanies","searchCompanies","getCompanies","fileName","_jsxFileName","lineNumber","columnNumber","className","children","searchFor","map","c","handle","name","description","logoUrl","_c","$RefreshReg$"],"sources":["/Users/max/Desktop/Code/react-jobly/src/companies/Companies.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport CompanyCard from \"./CompanyCard\";\nimport JoblyApi from \"../api\";\nimport SearchForm from \"../helpers/SearchForm\";\nimport Loading from \"../helpers/Loading\";\n\n// show list of all companies with jobs.\nconst Companies = () => {\n  const [companies, setCompanies] = useState(null);\n\n\n// get companies from API.\nasync function searchCompanies() {\n        let companies = await JoblyApi.getCompanies()\n        setCompanies(companies);\n}\n\n// get companies from API on mount.\nuseEffect(() => {\n    searchCompanies();\n}, []);\n\n// i'm not sure why app is broken if i don't return this...\nif (!companies) return <Loading />;\n\n// map through list and create cards for each company.\nreturn (\n  <section className=\"col-md-8\">\n    <div>\n      <SearchForm searchFor={searchCompanies} />\n      {companies.map(c => (\n        <CompanyCard\n            key={c.handle}\n            handle={c.handle}\n            name={c.name}\n            description={c.description}\n            logoUrl={c.logoUrl}\n        />\n      ))}\n    </div>\n  </section>\n);\n}\n\nexport default Companies;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,WAAW,MAAM,eAAe;AACvC,OAAOC,QAAQ,MAAM,QAAQ;AAC7B,OAAOC,UAAU,MAAM,uBAAuB;AAC9C,OAAOC,OAAO,MAAM,oBAAoB;;AAExC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;;EAGlD;EACA,eAAeY,eAAeA,CAAA,EAAG;IACzB,IAAIF,SAAS,GAAG,MAAMP,QAAQ,CAACU,YAAY,CAAC,CAAC;IAC7CF,YAAY,CAACD,SAAS,CAAC;EAC/B;;EAEA;EACAT,SAAS,CAAC,MAAM;IACZW,eAAe,CAAC,CAAC;EACrB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,IAAI,CAACF,SAAS,EAAE,oBAAOH,OAAA,CAACF,OAAO;IAAAS,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;;EAElC;EACA,oBACEV,OAAA;IAASW,SAAS,EAAC,UAAU;IAAAC,QAAA,eAC3BZ,OAAA;MAAAY,QAAA,gBACEZ,OAAA,CAACH,UAAU;QAACgB,SAAS,EAAER;MAAgB;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,EACzCP,SAAS,CAACW,GAAG,CAACC,CAAC,iBACdf,OAAA,CAACL,WAAW;QAERqB,MAAM,EAAED,CAAC,CAACC,MAAO;QACjBC,IAAI,EAAEF,CAAC,CAACE,IAAK;QACbC,WAAW,EAAEH,CAAC,CAACG,WAAY;QAC3BC,OAAO,EAAEJ,CAAC,CAACI;MAAQ,GAJdJ,CAAC,CAACC,MAAM;QAAAT,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAKhB,CACF,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEZ,CAAC;AAAAR,EAAA,CAnCKD,SAAS;AAAAmB,EAAA,GAATnB,SAAS;AAqCf,eAAeA,SAAS;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}