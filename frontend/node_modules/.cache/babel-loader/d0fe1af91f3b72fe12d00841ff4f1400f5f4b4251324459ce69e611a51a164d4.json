{"ast":null,"code":"var _jsxFileName = \"/Users/max/Desktop/Code/react-jobly/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport JoblyApi from \"./api\";\nimport NavBar from \"./navbar/NavBar\";\nimport RoutesList from \"./routes/Routes\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport UserContext from \"./auth/UserContext\";\nimport Loading from \"./helpers/Loading\";\nimport { decodeToken } from \"react-jwt\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [isLoading, setIsLoading] = useState(true);\n  const [currentUser, setCurrentUser] = useState(null);\n  const [token, setToken] = useState(\"\");\n\n  // login method.\n  const login = async () => {};\n\n  // load user info from API.\n  useEffect(function loadUser() {\n    async function getCurrentUser() {\n      if (token) {\n        try {\n          let {\n            username\n          } = decodeToken(JoblyApi.token);\n          // put the token on the Api class so it can use it to call the API.\n          JoblyApi.token = token;\n          let currentUser = await JoblyApi.getCurrentUser(username);\n          setCurrentUser(currentUser);\n          console.log(\"currentUser: \" + currentUser);\n        } catch (err) {\n          console.error(\"problem loading\", err);\n          setCurrentUser(null);\n        }\n      }\n      setIsLoading(false);\n    }\n\n    // set infoLoaded to false while async getCurrentUser runs; once the\n    // data is fetched (or even if an error happens!), this will be set back\n    // to false to control the spinner.\n    setIsLoading(true);\n    getCurrentUser();\n  }, [token]);\n\n  // if (isLoading) {\n  //   return <Loading />;\n  // }\n\n  return /*#__PURE__*/_jsxDEV(BrowserRouter, {\n    children: /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n      value: {\n        currentUser,\n        setCurrentUser\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App\",\n        children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(RoutesList, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"2JNlGhdlOSo+5bMdTMUzgLpjp7w=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","JoblyApi","NavBar","RoutesList","BrowserRouter","UserContext","Loading","decodeToken","jsxDEV","_jsxDEV","App","_s","isLoading","setIsLoading","currentUser","setCurrentUser","token","setToken","login","loadUser","getCurrentUser","username","console","log","err","error","children","Provider","value","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/max/Desktop/Code/react-jobly/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport JoblyApi from \"./api\";\nimport NavBar from \"./navbar/NavBar\";\nimport RoutesList from \"./routes/Routes\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport UserContext from \"./auth/UserContext\";\nimport Loading from \"./helpers/Loading\";\nimport { decodeToken } from \"react-jwt\";\nimport \"./App.css\";\n\nfunction App() {\n  const [isLoading, setIsLoading] = useState(true);\n  const [currentUser, setCurrentUser] = useState(null);\n  const [token, setToken] = useState(\"\");\n\n  // login method.\n  const login = async () => {};\n\n  // load user info from API.\n  useEffect(\n    function loadUser() {\n      async function getCurrentUser() {\n        if (token) {\n          try {\n            let { username } = decodeToken(JoblyApi.token);\n            // put the token on the Api class so it can use it to call the API.\n            JoblyApi.token = token;\n            let currentUser = await JoblyApi.getCurrentUser(username);\n            setCurrentUser(currentUser);\n            console.log(\"currentUser: \" + currentUser);\n          } catch (err) {\n            console.error(\"problem loading\", err);\n            setCurrentUser(null);\n          }\n        }\n        setIsLoading(false);\n      }\n\n      // set infoLoaded to false while async getCurrentUser runs; once the\n      // data is fetched (or even if an error happens!), this will be set back\n      // to false to control the spinner.\n      setIsLoading(true);\n      getCurrentUser();\n    },\n    [token]\n  );\n\n  // if (isLoading) {\n  //   return <Loading />;\n  // }\n\n  return (\n    <BrowserRouter>\n      <UserContext.Provider value={{ currentUser, setCurrentUser }}>\n        <div className=\"App\">\n          <NavBar />\n          <RoutesList />\n        </div>\n      </UserContext.Provider>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,QAAQ,MAAM,OAAO;AAC5B,OAAOC,MAAM,MAAM,iBAAiB;AACpC,OAAOC,UAAU,MAAM,iBAAiB;AACxC,SAASC,aAAa,QAAQ,kBAAkB;AAChD,OAAOC,WAAW,MAAM,oBAAoB;AAC5C,OAAOC,OAAO,MAAM,mBAAmB;AACvC,SAASC,WAAW,QAAQ,WAAW;AACvC,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACe,WAAW,EAAEC,cAAc,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACiB,KAAK,EAAEC,QAAQ,CAAC,GAAGlB,QAAQ,CAAC,EAAE,CAAC;;EAEtC;EACA,MAAMmB,KAAK,GAAG,MAAAA,CAAA,KAAY,CAAC,CAAC;;EAE5B;EACAlB,SAAS,CACP,SAASmB,QAAQA,CAAA,EAAG;IAClB,eAAeC,cAAcA,CAAA,EAAG;MAC9B,IAAIJ,KAAK,EAAE;QACT,IAAI;UACF,IAAI;YAAEK;UAAS,CAAC,GAAGd,WAAW,CAACN,QAAQ,CAACe,KAAK,CAAC;UAC9C;UACAf,QAAQ,CAACe,KAAK,GAAGA,KAAK;UACtB,IAAIF,WAAW,GAAG,MAAMb,QAAQ,CAACmB,cAAc,CAACC,QAAQ,CAAC;UACzDN,cAAc,CAACD,WAAW,CAAC;UAC3BQ,OAAO,CAACC,GAAG,CAAC,eAAe,GAAGT,WAAW,CAAC;QAC5C,CAAC,CAAC,OAAOU,GAAG,EAAE;UACZF,OAAO,CAACG,KAAK,CAAC,iBAAiB,EAAED,GAAG,CAAC;UACrCT,cAAc,CAAC,IAAI,CAAC;QACtB;MACF;MACAF,YAAY,CAAC,KAAK,CAAC;IACrB;;IAEA;IACA;IACA;IACAA,YAAY,CAAC,IAAI,CAAC;IAClBO,cAAc,CAAC,CAAC;EAClB,CAAC,EACD,CAACJ,KAAK,CACR,CAAC;;EAED;EACA;EACA;;EAEA,oBACEP,OAAA,CAACL,aAAa;IAAAsB,QAAA,eACZjB,OAAA,CAACJ,WAAW,CAACsB,QAAQ;MAACC,KAAK,EAAE;QAAEd,WAAW;QAAEC;MAAe,CAAE;MAAAW,QAAA,eAC3DjB,OAAA;QAAKoB,SAAS,EAAC,KAAK;QAAAH,QAAA,gBAClBjB,OAAA,CAACP,MAAM;UAAA4B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACVxB,OAAA,CAACN,UAAU;UAAA2B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACX;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACc;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACV,CAAC;AAEpB;AAACtB,EAAA,CAnDQD,GAAG;AAAAwB,EAAA,GAAHxB,GAAG;AAqDZ,eAAeA,GAAG;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}