{"ast":null,"code":"var _jsxFileName = \"/Users/max/Desktop/Code/react-jobly/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport JoblyApi from \"./api\";\nimport NavBar from \"./navbar/NavBar\";\nimport RoutesList from \"./routes/Routes\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport UserContext from \"./auth/UserContext\";\nimport Loading from \"./helpers/Loading\";\nimport { decodeToken } from \"react-jwt\";\nimport useLocalStorage from \"./hooks/useLocalStorage\";\nimport \"./App.css\";\n\n// key for localStorage.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TOKEN_KEY = \"jobly-token\";\nfunction App() {\n  _s();\n  const [isLoading, setIsLoading] = useState(true);\n  const [currentUser, setCurrentUser] = useState(null);\n  const [token, setToken] = useLocalStorage(TOKEN_KEY);\n\n  // signup method.\n  async function signup(signupData) {\n    try {\n      let token = await JoblyApi.signup(signupData);\n      setToken(token);\n      return {\n        success: true\n      };\n    } catch (errors) {\n      console.error(\"signup failed\", errors);\n      return {\n        success: false,\n        errors\n      };\n    }\n  }\n\n  // login method.\n  async function login(loginData) {\n    try {\n      let token = await JoblyApi.login(loginData);\n      setToken(token);\n      return {\n        success: true\n      };\n    } catch (errors) {\n      console.error(\"login failed\", errors);\n      return {\n        success: false,\n        errors\n      };\n    }\n  }\n\n  // logout method.\n  function logout() {\n    setCurrentUser(null);\n    setToken(null);\n  }\n\n  // load user info from API.\n  useEffect(function loadUser() {\n    async function getCurrentUser() {\n      if (token) {\n        try {\n          let {\n            username\n          } = decodeToken(token);\n          // console.log(\"username: \" + username);\n          // put the token on the Api class so it can use it to call the API.\n          JoblyApi.token = token;\n          let currentUser = await JoblyApi.getCurrentUser(username);\n          setCurrentUser(currentUser);\n        } catch (err) {\n          console.error(\"problem loading\", err);\n          setCurrentUser(null);\n        }\n      }\n      setIsLoading(false);\n    }\n\n    // set infoLoaded to false while async getCurrentUser runs; once the\n    // data is fetched (or even if an error happens!), this will be set back\n    // to false to control the spinner.\n    setIsLoading(true);\n    getCurrentUser();\n  }, [token]);\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(BrowserRouter, {\n    children: /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n      value: {\n        currentUser,\n        setCurrentUser\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App\",\n        children: [/*#__PURE__*/_jsxDEV(NavBar, {\n          logout: logout\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(RoutesList, {\n          login: login,\n          signup: signup\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"DbeEbdNKvJNv497ea6pMX5OuKXU=\", false, function () {\n  return [useLocalStorage];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","JoblyApi","NavBar","RoutesList","BrowserRouter","UserContext","Loading","decodeToken","useLocalStorage","jsxDEV","_jsxDEV","TOKEN_KEY","App","_s","isLoading","setIsLoading","currentUser","setCurrentUser","token","setToken","signup","signupData","success","errors","console","error","login","loginData","logout","loadUser","getCurrentUser","username","err","fileName","_jsxFileName","lineNumber","columnNumber","children","Provider","value","className","_c","$RefreshReg$"],"sources":["/Users/max/Desktop/Code/react-jobly/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport JoblyApi from \"./api\";\nimport NavBar from \"./navbar/NavBar\";\nimport RoutesList from \"./routes/Routes\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport UserContext from \"./auth/UserContext\";\nimport Loading from \"./helpers/Loading\";\nimport { decodeToken } from \"react-jwt\";\nimport useLocalStorage from \"./hooks/useLocalStorage\";\nimport \"./App.css\";\n\n// key for localStorage.\nexport const TOKEN_KEY = \"jobly-token\";\n\nfunction App() {\n  const [isLoading, setIsLoading] = useState(true);\n  const [currentUser, setCurrentUser] = useState(null);\n  const [token, setToken] = useLocalStorage(TOKEN_KEY);\n\n  // signup method.\n  async function signup(signupData) {\n    try {\n      let token = await JoblyApi.signup(signupData);\n      setToken(token);\n      return { success: true };\n    } catch (errors) {\n      console.error(\"signup failed\", errors);\n      return { success: false, errors };\n    }\n  }\n\n  // login method.\n  async function login(loginData) {\n    try {\n      let token = await JoblyApi.login(loginData);\n      setToken(token);\n      return { success: true };\n    } catch (errors) {\n      console.error(\"login failed\", errors);\n      return { success: false, errors };\n    }\n  }\n\n  // logout method.\n  function logout() {\n    setCurrentUser(null);\n    setToken(null);\n  }\n\n  // load user info from API.\n  useEffect(\n    function loadUser() {\n      async function getCurrentUser() {\n        if (token) {\n          try {\n            let { username } = decodeToken(token);\n            // console.log(\"username: \" + username);\n            // put the token on the Api class so it can use it to call the API.\n            JoblyApi.token = token;\n            let currentUser = await JoblyApi.getCurrentUser(username);\n            setCurrentUser(currentUser);\n          } catch (err) {\n            console.error(\"problem loading\", err);\n            setCurrentUser(null);\n          }\n        }\n        setIsLoading(false);\n      }\n\n      // set infoLoaded to false while async getCurrentUser runs; once the\n      // data is fetched (or even if an error happens!), this will be set back\n      // to false to control the spinner.\n      setIsLoading(true);\n      getCurrentUser();\n    },\n    [token]\n  );\n\n  if (isLoading) {\n    return <Loading />;\n  }\n\n  return (\n    <BrowserRouter>\n      <UserContext.Provider value={{ currentUser, setCurrentUser }}>\n        <div className=\"App\">\n          <NavBar logout={logout} />\n          <RoutesList login={login} signup={signup} />\n        </div>\n      </UserContext.Provider>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}