{"ast":null,"code":"var _jsxFileName = \"/Users/max/Desktop/Code/react-jobly/src/jobs/Jobs.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport JoblyApi from \"../api\";\nimport Loading from \"../helpers/Loading\";\nimport JobCard from \"./JobCard\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Jobs = () => {\n  _s();\n  const [jobs, setJobs] = useState(null);\n\n  // get jobs from API.\n  async function searchJobs(name) {\n    console.log(`searching API for: ${name !== null && name !== void 0 ? name : \"all jobs\"}`);\n    let jobs = await JoblyApi.getJobs(name);\n    setJobs(jobs);\n  }\n\n  // get jobs from API on mount.\n  useEffect(() => {\n    console.log(\"useEffect on Jobs Page\");\n    searchJobs();\n  }, []);\n  if (!jobs) return /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 21\n  }, this);\n\n  // set applied for job's buttons to disabled.\n  let applied = false;\n  if (currentUser.applications.includes(id)) {\n    applied = true;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container text-center\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"All Available Jobs\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: jobs.map(j => /*#__PURE__*/_jsxDEV(JobCard, {\n        id: j.id,\n        companyName: j.companyName,\n        title: j.title,\n        salary: j.salary,\n        equity: j.equity,\n        appliedFor: applied\n      }, j.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n_s(Jobs, \"s7me8f4JZbVN6U8woDMStsGKtbc=\");\n_c = Jobs;\nexport default Jobs;\nvar _c;\n$RefreshReg$(_c, \"Jobs\");","map":{"version":3,"names":["React","useEffect","useState","JoblyApi","Loading","JobCard","jsxDEV","_jsxDEV","Jobs","_s","jobs","setJobs","searchJobs","name","console","log","getJobs","fileName","_jsxFileName","lineNumber","columnNumber","applied","currentUser","applications","includes","id","className","children","map","j","companyName","title","salary","equity","appliedFor","_c","$RefreshReg$"],"sources":["/Users/max/Desktop/Code/react-jobly/src/jobs/Jobs.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport JoblyApi from \"../api\";\nimport Loading from \"../helpers/Loading\";\nimport JobCard from \"./JobCard\";\n\nconst Jobs = () => {\n  const [jobs, setJobs] = useState(null);\n\n  // get jobs from API.\n  async function searchJobs(name) {\n    console.log(`searching API for: ${name ?? \"all jobs\"}`);\n    let jobs = await JoblyApi.getJobs(name);\n    setJobs(jobs);\n  }\n\n  // get jobs from API on mount.\n  useEffect(() => {\n    console.log(\"useEffect on Jobs Page\");\n    searchJobs();\n  }, []);\n\n  if (!jobs) return <Loading />;\n\n  // set applied for job's buttons to disabled.\n  let applied = false;\n  if (currentUser.applications.includes(id)) {\n    applied = true;\n  }\n\n  return (\n    <div className=\"container text-center\">\n      <h1>All Available Jobs</h1>\n      <div>\n        {jobs.map((j) => (\n          <JobCard\n            key={j.id}\n            id={j.id}\n            companyName={j.companyName}\n            title={j.title}\n            salary={j.salary}\n            equity={j.equity}\n            appliedFor={applied}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Jobs;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,QAAQ,MAAM,QAAQ;AAC7B,OAAOC,OAAO,MAAM,oBAAoB;AACxC,OAAOC,OAAO,MAAM,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhC,MAAMC,IAAI,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACjB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;;EAEtC;EACA,eAAeU,UAAUA,CAACC,IAAI,EAAE;IAC9BC,OAAO,CAACC,GAAG,CAAE,sBAAqBF,IAAI,aAAJA,IAAI,cAAJA,IAAI,GAAI,UAAW,EAAC,CAAC;IACvD,IAAIH,IAAI,GAAG,MAAMP,QAAQ,CAACa,OAAO,CAACH,IAAI,CAAC;IACvCF,OAAO,CAACD,IAAI,CAAC;EACf;;EAEA;EACAT,SAAS,CAAC,MAAM;IACda,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;IACrCH,UAAU,CAAC,CAAC;EACd,CAAC,EAAE,EAAE,CAAC;EAEN,IAAI,CAACF,IAAI,EAAE,oBAAOH,OAAA,CAACH,OAAO;IAAAa,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;;EAE7B;EACA,IAAIC,OAAO,GAAG,KAAK;EACnB,IAAIC,WAAW,CAACC,YAAY,CAACC,QAAQ,CAACC,EAAE,CAAC,EAAE;IACzCJ,OAAO,GAAG,IAAI;EAChB;EAEA,oBACEd,OAAA;IAAKmB,SAAS,EAAC,uBAAuB;IAAAC,QAAA,gBACpCpB,OAAA;MAAAoB,QAAA,EAAI;IAAkB;MAAAV,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC3Bb,OAAA;MAAAoB,QAAA,EACGjB,IAAI,CAACkB,GAAG,CAAEC,CAAC,iBACVtB,OAAA,CAACF,OAAO;QAENoB,EAAE,EAAEI,CAAC,CAACJ,EAAG;QACTK,WAAW,EAAED,CAAC,CAACC,WAAY;QAC3BC,KAAK,EAAEF,CAAC,CAACE,KAAM;QACfC,MAAM,EAAEH,CAAC,CAACG,MAAO;QACjBC,MAAM,EAAEJ,CAAC,CAACI,MAAO;QACjBC,UAAU,EAAEb;MAAQ,GANfQ,CAAC,CAACJ,EAAE;QAAAR,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAOV,CACF;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACX,EAAA,CA1CID,IAAI;AAAA2B,EAAA,GAAJ3B,IAAI;AA4CV,eAAeA,IAAI;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}