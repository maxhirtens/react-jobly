{"ast":null,"code":"var _jsxFileName = \"/Users/max/Desktop/Code/react-jobly/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport JoblyApi from \"./api\";\nimport NavBar from \"./navbar/NavBar\";\nimport RoutesList from \"./routes/Routes\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport UserContext from \"./auth/UserContext\";\nimport Loading from \"./helpers/Loading\";\nimport { decodeToken } from \"react-jwt\";\nimport \"./App.css\";\n\n// set up a test token.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst testToken = \"jobly-token\";\nconst myDecodedToken = decodeToken(testToken);\nconsole.log(myDecodedToken);\nfunction App() {\n  _s();\n  const [isLoading, setIsLoading] = useState(true);\n  const [currentUser, setCurrentUser] = useState(null);\n  const [token, setToken] = useState(testToken);\n\n  // login method.\n  const login = async () => {};\n\n  // // load user info from API.\n  // useEffect(\n  //   function loadUserInfo() {\n  //     async function getCurrentUser() {\n  //       if (token) {\n  //         try {\n  //           const myDecodedToken = decodeToken(token);\n  //           console.log(myDecodedToken);\n  //           let username = \"\";\n  //           // put the token on the Api class so it can use it to call the API.\n  //           JoblyApi.token = token;\n  //           let currentUser = await JoblyApi.getCurrentUser(username);\n  //           setCurrentUser(currentUser);\n  //         } catch (err) {\n  //           console.error(\"App loadUserInfo: problem loading\", err);\n  //           setCurrentUser(null);\n  //         }\n  //       }\n  //       setIsLoading(false);\n  //     }\n\n  //     // set infoLoaded to false while async getCurrentUser runs; once the\n  //     // data is fetched (or even if an error happens!), this will be set back\n  //     // to false to control the spinner.\n  //     setIsLoading(true);\n  //     getCurrentUser();\n  //   },\n  //   [token]\n  // );\n\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(BrowserRouter, {\n    children: /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n      value: {\n        currentUser,\n        setCurrentUser\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App\",\n        children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(RoutesList, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"G2h310dJ9OF/pDjY6tz6fhNjAkg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","JoblyApi","NavBar","RoutesList","BrowserRouter","UserContext","Loading","decodeToken","jsxDEV","_jsxDEV","testToken","myDecodedToken","console","log","App","_s","isLoading","setIsLoading","currentUser","setCurrentUser","token","setToken","login","fileName","_jsxFileName","lineNumber","columnNumber","children","Provider","value","className","_c","$RefreshReg$"],"sources":["/Users/max/Desktop/Code/react-jobly/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport JoblyApi from \"./api\";\nimport NavBar from \"./navbar/NavBar\";\nimport RoutesList from \"./routes/Routes\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport UserContext from \"./auth/UserContext\";\nimport Loading from \"./helpers/Loading\";\nimport { decodeToken } from \"react-jwt\";\nimport \"./App.css\";\n\n// set up a test token.\nconst testToken = \"jobly-token\";\nconst myDecodedToken = decodeToken(testToken);\nconsole.log(myDecodedToken);\n\nfunction App() {\n  const [isLoading, setIsLoading] = useState(true);\n  const [currentUser, setCurrentUser] = useState(null);\n  const [token, setToken] = useState(testToken);\n\n  // login method.\n  const login = async () => {};\n\n  // // load user info from API.\n  // useEffect(\n  //   function loadUserInfo() {\n  //     async function getCurrentUser() {\n  //       if (token) {\n  //         try {\n  //           const myDecodedToken = decodeToken(token);\n  //           console.log(myDecodedToken);\n  //           let username = \"\";\n  //           // put the token on the Api class so it can use it to call the API.\n  //           JoblyApi.token = token;\n  //           let currentUser = await JoblyApi.getCurrentUser(username);\n  //           setCurrentUser(currentUser);\n  //         } catch (err) {\n  //           console.error(\"App loadUserInfo: problem loading\", err);\n  //           setCurrentUser(null);\n  //         }\n  //       }\n  //       setIsLoading(false);\n  //     }\n\n  //     // set infoLoaded to false while async getCurrentUser runs; once the\n  //     // data is fetched (or even if an error happens!), this will be set back\n  //     // to false to control the spinner.\n  //     setIsLoading(true);\n  //     getCurrentUser();\n  //   },\n  //   [token]\n  // );\n\n  if (isLoading) {\n    return <Loading />;\n  }\n\n  return (\n    <BrowserRouter>\n      <UserContext.Provider value={{ currentUser, setCurrentUser }}>\n        <div className=\"App\">\n          <NavBar />\n          <RoutesList />\n        </div>\n      </UserContext.Provider>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,QAAQ,MAAM,OAAO;AAC5B,OAAOC,MAAM,MAAM,iBAAiB;AACpC,OAAOC,UAAU,MAAM,iBAAiB;AACxC,SAASC,aAAa,QAAQ,kBAAkB;AAChD,OAAOC,WAAW,MAAM,oBAAoB;AAC5C,OAAOC,OAAO,MAAM,mBAAmB;AACvC,SAASC,WAAW,QAAQ,WAAW;AACvC,OAAO,WAAW;;AAElB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,SAAS,GAAG,aAAa;AAC/B,MAAMC,cAAc,GAAGJ,WAAW,CAACG,SAAS,CAAC;AAC7CE,OAAO,CAACC,GAAG,CAACF,cAAc,CAAC;AAE3B,SAASG,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGlB,QAAQ,CAAC,IAAI,CAAC;EAChD,MAAM,CAACmB,WAAW,EAAEC,cAAc,CAAC,GAAGpB,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACqB,KAAK,EAAEC,QAAQ,CAAC,GAAGtB,QAAQ,CAACW,SAAS,CAAC;;EAE7C;EACA,MAAMY,KAAK,GAAG,MAAAA,CAAA,KAAY,CAAC,CAAC;;EAE5B;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,IAAIN,SAAS,EAAE;IACb,oBAAOP,OAAA,CAACH,OAAO;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACpB;EAEA,oBACEjB,OAAA,CAACL,aAAa;IAAAuB,QAAA,eACZlB,OAAA,CAACJ,WAAW,CAACuB,QAAQ;MAACC,KAAK,EAAE;QAAEX,WAAW;QAAEC;MAAe,CAAE;MAAAQ,QAAA,eAC3DlB,OAAA;QAAKqB,SAAS,EAAC,KAAK;QAAAH,QAAA,gBAClBlB,OAAA,CAACP,MAAM;UAAAqB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC,eACVjB,OAAA,CAACN,UAAU;UAAAoB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACX;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACc;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACV,CAAC;AAEpB;AAACX,EAAA,CApDQD,GAAG;AAAAiB,EAAA,GAAHjB,GAAG;AAsDZ,eAAeA,GAAG;AAAC,IAAAiB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}